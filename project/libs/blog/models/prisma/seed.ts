import { PostState, PostType,PrismaClient } from '@prisma/client';


const FIRST_POST_UUID = crypto.randomUUID();
const SECOND_POST_UUID = crypto.randomUUID();

const FIRST_USER_ID = '677cf3245d5261334f343a18';
const SECOND_USER_ID = '6755746b5903856268a55d4a';
const DEFAULT_LIKES_COUNT = 1;
const DEFAULT_COMMENTS_COUNT = 1;

function getPosts() {
  return [
    {
      id: FIRST_POST_UUID,
      tegs: ['#–∂–∏–≤–æ—Ç–Ω—ã–µ'],
      userId: FIRST_USER_ID,
      countLikes:DEFAULT_LIKES_COUNT,
      countComments:DEFAULT_COMMENTS_COUNT,
      state: PostState.published,
      repost: false,
      originPostId: FIRST_POST_UUID,
      type: PostType.text,
      name: '–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ',
      announcement: '–ó–∞ —á—Ç–æ –º—ã –ª—é–±–∏–º –Ω–∞—à–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤',
      text: '–ú—ã –¥–æ–ª–∂–Ω—ã –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –∏ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ç–µ—Ö –∫–æ–≥–æ –ø—Ä–∏—Ä—É—á–∏–ª–∏',
      video:'',
      author:'',

      comments: [
        {
          message: '–ù–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ –≤—Å–µ —Ç–∞–∫ –¥–µ–ª–∞—é—Ç',
          userId: SECOND_USER_ID,
        }
    ],
      likes: [
        {
          userId: FIRST_USER_ID,
        }
      ],
    },
    {
      id: SECOND_POST_UUID,
      tegs: ['#—Ñ–∏–ª—å–º'],
      userId: SECOND_USER_ID,
      countLikes:DEFAULT_LIKES_COUNT,
      countComments:DEFAULT_COMMENTS_COUNT,
      state: PostState.published,
      repost: false,
      originPostId: SECOND_POST_UUID,
      type: PostType.text,
      name: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã',
      announcement: '–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ',
      message: '–ù–µ–¥–∞–≤–Ω–æ –≤—ã—à–µ–ª –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω –ú–æ—Å–ì–∞–∑',
      video:'',
      author:'',

      comments: [
        {
          message: '–î–∞, –Ω–µ–ø–ª–æ—Ö–æ–π —Å–µ—Ä–∏–∞–ª',
          userId: FIRST_USER_ID,
        },
      ],

      likes: [
        {
          userId: SECOND_USER_ID,
        },
      ]

    },
  ]
}

async function seedDb(prismaClient: PrismaClient) {
  const mockPosts = getPosts();
  for (const post of mockPosts) {
    await prismaClient.post.upsert({
      where: { id: post.id },
      update: {},
      create:{
        id: post.id,
        tegs: post.tegs,
        userId: post.userId,
        countLikes:post.countLikes,
        countComments:post.countComments,
        state: post.state,
        repost: post.repost,
        originPostId: post.originPostId,
        type: post.type,
        name: post.name,
        announcement: post.announcement,
        text: '–¢–µ–∫—Å—Ç',
        video: post.video,
        author: post.author,


        comments: post.comments ? {
          create: post.comments,
        }: undefined,

        likes: post.likes ? {
          create: post.likes
        } : undefined
      }
    });

  }



  console.info('ü§òÔ∏è Database was filled');
}

async function bootstrap() {
  const prismaClient = new PrismaClient();

  try {
    await seedDb(prismaClient);
    globalThis.process.exit(0);
  } catch (error: unknown) {
    console.error(error);
    globalThis.process.exit(1);
  } finally {
    await prismaClient.$disconnect();
  }
}

bootstrap();
